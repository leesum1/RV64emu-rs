

use strum_macros::{Display, EnumString, FromRepr, IntoStaticStr};

use crate::{cpu_core::CpuCore, traptype::TrapType};

/* Automatically generated by parse_opcodes */
pub const MATCH_ADD: u32 = 0x33;
pub const MASK_ADD: u32 = 0xfe00707f;
pub const MATCH_ADDI: u32 = 0x13;
pub const MASK_ADDI: u32 = 0x707f;
pub const MATCH_ADDIW: u32 = 0x1b;
pub const MASK_ADDIW: u32 = 0x707f;
pub const MATCH_ADDW: u32 = 0x3b;
pub const MASK_ADDW: u32 = 0xfe00707f;
pub const MATCH_AND: u32 = 0x7033;
pub const MASK_AND: u32 = 0xfe00707f;
pub const MATCH_ANDI: u32 = 0x7013;
pub const MASK_ANDI: u32 = 0x707f;
pub const MATCH_AUIPC: u32 = 0x17;
pub const MASK_AUIPC: u32 = 0x7f;
pub const MATCH_BEQ: u32 = 0x63;
pub const MASK_BEQ: u32 = 0x707f;
pub const MATCH_BGE: u32 = 0x5063;
pub const MASK_BGE: u32 = 0x707f;
pub const MATCH_BGEU: u32 = 0x7063;
pub const MASK_BGEU: u32 = 0x707f;
pub const MATCH_BLT: u32 = 0x4063;
pub const MASK_BLT: u32 = 0x707f;
pub const MATCH_BLTU: u32 = 0x6063;
pub const MASK_BLTU: u32 = 0x707f;
pub const MATCH_BNE: u32 = 0x1063;
pub const MASK_BNE: u32 = 0x707f;
pub const MATCH_DIV: u32 = 0x2004033;
pub const MASK_DIV: u32 = 0xfe00707f;
pub const MATCH_DIVU: u32 = 0x2005033;
pub const MASK_DIVU: u32 = 0xfe00707f;
pub const MATCH_DIVUW: u32 = 0x200503b;
pub const MASK_DIVUW: u32 = 0xfe00707f;
pub const MATCH_DIVW: u32 = 0x200403b;
pub const MASK_DIVW: u32 = 0xfe00707f;
pub const MATCH_EBREAK: u32 = 0x100073;
pub const MASK_EBREAK: u32 = 0xffffffff;
pub const MATCH_ECALL: u32 = 0x73;
pub const MASK_ECALL: u32 = 0xffffffff;
pub const MATCH_FENCE: u32 = 0xf;
pub const MASK_FENCE: u32 = 0x707f;
pub const MATCH_FENCE_I: u32 = 0x100f;
pub const MASK_FENCE_I: u32 = 0x707f;
pub const MATCH_FENCE_TSO: u32 = 0x8330000f;
pub const MASK_FENCE_TSO: u32 = 0xfff0707f;
pub const MATCH_JAL: u32 = 0x6f;
pub const MASK_JAL: u32 = 0x7f;
pub const MATCH_JALR: u32 = 0x67;
pub const MASK_JALR: u32 = 0x707f;
pub const MATCH_LB: u32 = 0x3;
pub const MASK_LB: u32 = 0x707f;
pub const MATCH_LBU: u32 = 0x4003;
pub const MASK_LBU: u32 = 0x707f;
pub const MATCH_LD: u32 = 0x3003;
pub const MASK_LD: u32 = 0x707f;
pub const MATCH_LH: u32 = 0x1003;
pub const MASK_LH: u32 = 0x707f;
pub const MATCH_LHU: u32 = 0x5003;
pub const MASK_LHU: u32 = 0x707f;
pub const MATCH_LUI: u32 = 0x37;
pub const MASK_LUI: u32 = 0x7f;
pub const MATCH_LW: u32 = 0x2003;
pub const MASK_LW: u32 = 0x707f;
pub const MATCH_LWU: u32 = 0x6003;
pub const MASK_LWU: u32 = 0x707f;
pub const MATCH_MUL: u32 = 0x2000033;
pub const MASK_MUL: u32 = 0xfe00707f;
pub const MATCH_MULH: u32 = 0x2001033;
pub const MASK_MULH: u32 = 0xfe00707f;
pub const MATCH_MULHSU: u32 = 0x2002033;
pub const MASK_MULHSU: u32 = 0xfe00707f;
pub const MATCH_MULHU: u32 = 0x2003033;
pub const MASK_MULHU: u32 = 0xfe00707f;
pub const MATCH_MULW: u32 = 0x200003b;
pub const MASK_MULW: u32 = 0xfe00707f;
pub const MATCH_OR: u32 = 0x6033;
pub const MASK_OR: u32 = 0xfe00707f;
pub const MATCH_ORI: u32 = 0x6013;
pub const MASK_ORI: u32 = 0x707f;
pub const MATCH_PAUSE: u32 = 0x100000f;
pub const MASK_PAUSE: u32 = 0xffffffff;
pub const MATCH_REM: u32 = 0x2006033;
pub const MASK_REM: u32 = 0xfe00707f;
pub const MATCH_REMU: u32 = 0x2007033;
pub const MASK_REMU: u32 = 0xfe00707f;
pub const MATCH_REMUW: u32 = 0x200703b;
pub const MASK_REMUW: u32 = 0xfe00707f;
pub const MATCH_REMW: u32 = 0x200603b;
pub const MASK_REMW: u32 = 0xfe00707f;
pub const MATCH_SB: u32 = 0x23;
pub const MASK_SB: u32 = 0x707f;
pub const MATCH_SBREAK: u32 = 0x100073;
pub const MASK_SBREAK: u32 = 0xffffffff;
pub const MATCH_SCALL: u32 = 0x73;
pub const MASK_SCALL: u32 = 0xffffffff;
pub const MATCH_SD: u32 = 0x3023;
pub const MASK_SD: u32 = 0x707f;
pub const MATCH_SH: u32 = 0x1023;
pub const MASK_SH: u32 = 0x707f;
pub const MATCH_SLL: u32 = 0x1033;
pub const MASK_SLL: u32 = 0xfe00707f;
pub const MATCH_SLLI: u32 = 0x1013;
pub const MASK_SLLI: u32 = 0xfc00707f;
pub const MATCH_SLLI_RV32: u32 = 0x1013;
pub const MASK_SLLI_RV32: u32 = 0xfe00707f;
pub const MATCH_SLLIW: u32 = 0x101b;
pub const MASK_SLLIW: u32 = 0xfe00707f;
pub const MATCH_SLLW: u32 = 0x103b;
pub const MASK_SLLW: u32 = 0xfe00707f;
pub const MATCH_SLT: u32 = 0x2033;
pub const MASK_SLT: u32 = 0xfe00707f;
pub const MATCH_SLTI: u32 = 0x2013;
pub const MASK_SLTI: u32 = 0x707f;
pub const MATCH_SLTIU: u32 = 0x3013;
pub const MASK_SLTIU: u32 = 0x707f;
pub const MATCH_SLTU: u32 = 0x3033;
pub const MASK_SLTU: u32 = 0xfe00707f;
pub const MATCH_SRA: u32 = 0x40005033;
pub const MASK_SRA: u32 = 0xfe00707f;
pub const MATCH_SRAI: u32 = 0x40005013;
pub const MASK_SRAI: u32 = 0xfc00707f;
pub const MATCH_SRAI_RV32: u32 = 0x40005013;
pub const MASK_SRAI_RV32: u32 = 0xfe00707f;
pub const MATCH_SRAIW: u32 = 0x4000501b;
pub const MASK_SRAIW: u32 = 0xfe00707f;
pub const MATCH_SRAW: u32 = 0x4000503b;
pub const MASK_SRAW: u32 = 0xfe00707f;
pub const MATCH_SRL: u32 = 0x5033;
pub const MASK_SRL: u32 = 0xfe00707f;
pub const MATCH_SRLI: u32 = 0x5013;
pub const MASK_SRLI: u32 = 0xfc00707f;
pub const MATCH_SRLI_RV32: u32 = 0x5013;
pub const MASK_SRLI_RV32: u32 = 0xfe00707f;
pub const MATCH_SRLIW: u32 = 0x501b;
pub const MASK_SRLIW: u32 = 0xfe00707f;
pub const MATCH_SRLW: u32 = 0x503b;
pub const MASK_SRLW: u32 = 0xfe00707f;
pub const MATCH_SUB: u32 = 0x40000033;
pub const MASK_SUB: u32 = 0xfe00707f;
pub const MATCH_SUBW: u32 = 0x4000003b;
pub const MASK_SUBW: u32 = 0xfe00707f;
pub const MATCH_SW: u32 = 0x2023;
pub const MASK_SW: u32 = 0x707f;
pub const MATCH_XOR: u32 = 0x4033;
pub const MASK_XOR: u32 = 0xfe00707f;
pub const MATCH_XORI: u32 = 0x4013;
pub const MASK_XORI: u32 = 0x707f;
pub const MATCH_CSRRC: u32 = 0x3073;
pub const MASK_CSRRC: u32 = 0x707f;
pub const MATCH_CSRRCI: u32 = 0x7073;
pub const MASK_CSRRCI: u32 = 0x707f;
pub const MATCH_CSRRS: u32 = 0x2073;
pub const MASK_CSRRS: u32 = 0x707f;
pub const MATCH_CSRRSI: u32 = 0x6073;
pub const MASK_CSRRSI: u32 = 0x707f;
pub const MATCH_CSRRW: u32 = 0x1073;
pub const MASK_CSRRW: u32 = 0x707f;
pub const MATCH_CSRRWI: u32 = 0x5073;
pub const MASK_CSRRWI: u32 = 0x707f;
pub const MATCH_MRET: u32 = 0x30200073;                                                                                                                                                          
pub const MASK_MRET: u32 = 0xffffffff;

pub const CSR_FFLAGS: u16 = 0x1;
pub const CSR_FRM: u16 = 0x2;
pub const CSR_FCSR: u16 = 0x3;
pub const CSR_VSTART: u16 = 0x8;
pub const CSR_VXSAT: u16 = 0x9;
pub const CSR_VXRM: u16 = 0xa;
pub const CSR_VCSR: u16 = 0xf;
pub const CSR_SEED: u16 = 0x15;
pub const CSR_JVT: u16 = 0x17;
pub const CSR_CYCLE: u16 = 0xc00;
pub const CSR_TIME: u16 = 0xc01;
pub const CSR_INSTRET: u16 = 0xc02;
pub const CSR_HPMCOUNTER3: u16 = 0xc03;
pub const CSR_HPMCOUNTER4: u16 = 0xc04;
pub const CSR_HPMCOUNTER5: u16 = 0xc05;
pub const CSR_HPMCOUNTER6: u16 = 0xc06;
pub const CSR_HPMCOUNTER7: u16 = 0xc07;
pub const CSR_HPMCOUNTER8: u16 = 0xc08;
pub const CSR_HPMCOUNTER9: u16 = 0xc09;
pub const CSR_HPMCOUNTER10: u16 = 0xc0a;
pub const CSR_HPMCOUNTER11: u16 = 0xc0b;
pub const CSR_HPMCOUNTER12: u16 = 0xc0c;
pub const CSR_HPMCOUNTER13: u16 = 0xc0d;
pub const CSR_HPMCOUNTER14: u16 = 0xc0e;
pub const CSR_HPMCOUNTER15: u16 = 0xc0f;
pub const CSR_HPMCOUNTER16: u16 = 0xc10;
pub const CSR_HPMCOUNTER17: u16 = 0xc11;
pub const CSR_HPMCOUNTER18: u16 = 0xc12;
pub const CSR_HPMCOUNTER19: u16 = 0xc13;
pub const CSR_HPMCOUNTER20: u16 = 0xc14;
pub const CSR_HPMCOUNTER21: u16 = 0xc15;
pub const CSR_HPMCOUNTER22: u16 = 0xc16;
pub const CSR_HPMCOUNTER23: u16 = 0xc17;
pub const CSR_HPMCOUNTER24: u16 = 0xc18;
pub const CSR_HPMCOUNTER25: u16 = 0xc19;
pub const CSR_HPMCOUNTER26: u16 = 0xc1a;
pub const CSR_HPMCOUNTER27: u16 = 0xc1b;
pub const CSR_HPMCOUNTER28: u16 = 0xc1c;
pub const CSR_HPMCOUNTER29: u16 = 0xc1d;
pub const CSR_HPMCOUNTER30: u16 = 0xc1e;
pub const CSR_HPMCOUNTER31: u16 = 0xc1f;
pub const CSR_VL: u16 = 0xc20;
pub const CSR_VTYPE: u16 = 0xc21;
pub const CSR_VLENB: u16 = 0xc22;
pub const CSR_SSTATUS: u16 = 0x100;
pub const CSR_SEDELEG: u16 = 0x102;
pub const CSR_SIDELEG: u16 = 0x103;
pub const CSR_SIE: u16 = 0x104;
pub const CSR_STVEC: u16 = 0x105;
pub const CSR_SCOUNTEREN: u16 = 0x106;
pub const CSR_SENVCFG: u16 = 0x10a;
pub const CSR_SSTATEEN0: u16 = 0x10c;
pub const CSR_SSTATEEN1: u16 = 0x10d;
pub const CSR_SSTATEEN2: u16 = 0x10e;
pub const CSR_SSTATEEN3: u16 = 0x10f;
pub const CSR_SSCRATCH: u16 = 0x140;
pub const CSR_SEPC: u16 = 0x141;
pub const CSR_SCAUSE: u16 = 0x142;
pub const CSR_STVAL: u16 = 0x143;
pub const CSR_SIP: u16 = 0x144;
pub const CSR_STIMECMP: u16 = 0x14d;
pub const CSR_SISELECT: u16 = 0x150;
pub const CSR_SIREG: u16 = 0x151;
pub const CSR_STOPEI: u16 = 0x15c;
pub const CSR_SATP: u16 = 0x180;
pub const CSR_SCONTEXT: u16 = 0x5a8;
pub const CSR_VSSTATUS: u16 = 0x200;
pub const CSR_VSIE: u16 = 0x204;
pub const CSR_VSTVEC: u16 = 0x205;
pub const CSR_VSSCRATCH: u16 = 0x240;
pub const CSR_VSEPC: u16 = 0x241;
pub const CSR_VSCAUSE: u16 = 0x242;
pub const CSR_VSTVAL: u16 = 0x243;
pub const CSR_VSIP: u16 = 0x244;
pub const CSR_VSTIMECMP: u16 = 0x24d;
pub const CSR_VSISELECT: u16 = 0x250;
pub const CSR_VSIREG: u16 = 0x251;
pub const CSR_VSTOPEI: u16 = 0x25c;
pub const CSR_VSATP: u16 = 0x280;
pub const CSR_HSTATUS: u16 = 0x600;
pub const CSR_HEDELEG: u16 = 0x602;
pub const CSR_HIDELEG: u16 = 0x603;
pub const CSR_HIE: u16 = 0x604;
pub const CSR_HTIMEDELTA: u16 = 0x605;
pub const CSR_HCOUNTEREN: u16 = 0x606;
pub const CSR_HGEIE: u16 = 0x607;
pub const CSR_HVIEN: u16 = 0x608;
pub const CSR_HVICTL: u16 = 0x609;
pub const CSR_HENVCFG: u16 = 0x60a;
pub const CSR_HSTATEEN0: u16 = 0x60c;
pub const CSR_HSTATEEN1: u16 = 0x60d;
pub const CSR_HSTATEEN2: u16 = 0x60e;
pub const CSR_HSTATEEN3: u16 = 0x60f;
pub const CSR_HTVAL: u16 = 0x643;
pub const CSR_HIP: u16 = 0x644;
pub const CSR_HVIP: u16 = 0x645;
pub const CSR_HVIPRIO1: u16 = 0x646;
pub const CSR_HVIPRIO2: u16 = 0x647;
pub const CSR_HTINST: u16 = 0x64a;
pub const CSR_HGATP: u16 = 0x680;
pub const CSR_HCONTEXT: u16 = 0x6a8;
pub const CSR_HGEIP: u16 = 0xe12;
pub const CSR_VSTOPI: u16 = 0xeb0;
pub const CSR_SCOUNTOVF: u16 = 0xda0;
pub const CSR_STOPI: u16 = 0xdb0;
pub const CSR_UTVT: u16 = 0x7;
pub const CSR_UNXTI: u16 = 0x45;
pub const CSR_UINTSTATUS: u16 = 0x46;
pub const CSR_USCRATCHCSW: u16 = 0x48;
pub const CSR_USCRATCHCSWL: u16 = 0x49;
pub const CSR_STVT: u16 = 0x107;
pub const CSR_SNXTI: u16 = 0x145;
pub const CSR_SINTSTATUS: u16 = 0x146;
pub const CSR_SSCRATCHCSW: u16 = 0x148;
pub const CSR_SSCRATCHCSWL: u16 = 0x149;
pub const CSR_MTVT: u16 = 0x307;
pub const CSR_MNXTI: u16 = 0x345;
pub const CSR_MINTSTATUS: u16 = 0x346;
pub const CSR_MSCRATCHCSW: u16 = 0x348;
pub const CSR_MSCRATCHCSWL: u16 = 0x349;
pub const CSR_MSTATUS: u16 = 0x300;
pub const CSR_MISA: u16 = 0x301;
pub const CSR_MEDELEG: u16 = 0x302;
pub const CSR_MIDELEG: u16 = 0x303;
pub const CSR_MIE: u16 = 0x304;
pub const CSR_MTVEC: u16 = 0x305;
pub const CSR_MCOUNTEREN: u16 = 0x306;
pub const CSR_MVIEN: u16 = 0x308;
pub const CSR_MVIP: u16 = 0x309;
pub const CSR_MENVCFG: u16 = 0x30a;
pub const CSR_MSTATEEN0: u16 = 0x30c;
pub const CSR_MSTATEEN1: u16 = 0x30d;
pub const CSR_MSTATEEN2: u16 = 0x30e;
pub const CSR_MSTATEEN3: u16 = 0x30f;
pub const CSR_MCOUNTINHIBIT: u16 = 0x320;
pub const CSR_MSCRATCH: u16 = 0x340;
pub const CSR_MEPC: u16 = 0x341;
pub const CSR_MCAUSE: u16 = 0x342;
pub const CSR_MTVAL: u16 = 0x343;
pub const CSR_MIP: u16 = 0x344;
pub const CSR_MTINST: u16 = 0x34a;
pub const CSR_MTVAL2: u16 = 0x34b;
pub const CSR_MISELECT: u16 = 0x350;
pub const CSR_MIREG: u16 = 0x351;
pub const CSR_MTOPEI: u16 = 0x35c;
pub const CSR_PMPCFG0: u16 = 0x3a0;
pub const CSR_PMPCFG1: u16 = 0x3a1;
pub const CSR_PMPCFG2: u16 = 0x3a2;
pub const CSR_PMPCFG3: u16 = 0x3a3;
pub const CSR_PMPCFG4: u16 = 0x3a4;
pub const CSR_PMPCFG5: u16 = 0x3a5;
pub const CSR_PMPCFG6: u16 = 0x3a6;
pub const CSR_PMPCFG7: u16 = 0x3a7;
pub const CSR_PMPCFG8: u16 = 0x3a8;
pub const CSR_PMPCFG9: u16 = 0x3a9;
pub const CSR_PMPCFG10: u16 = 0x3aa;
pub const CSR_PMPCFG11: u16 = 0x3ab;
pub const CSR_PMPCFG12: u16 = 0x3ac;
pub const CSR_PMPCFG13: u16 = 0x3ad;
pub const CSR_PMPCFG14: u16 = 0x3ae;
pub const CSR_PMPCFG15: u16 = 0x3af;
pub const CSR_PMPADDR0: u16 = 0x3b0;
pub const CSR_PMPADDR1: u16 = 0x3b1;
pub const CSR_PMPADDR2: u16 = 0x3b2;
pub const CSR_PMPADDR3: u16 = 0x3b3;
pub const CSR_PMPADDR4: u16 = 0x3b4;
pub const CSR_PMPADDR5: u16 = 0x3b5;
pub const CSR_PMPADDR6: u16 = 0x3b6;
pub const CSR_PMPADDR7: u16 = 0x3b7;
pub const CSR_PMPADDR8: u16 = 0x3b8;
pub const CSR_PMPADDR9: u16 = 0x3b9;
pub const CSR_PMPADDR10: u16 = 0x3ba;
pub const CSR_PMPADDR11: u16 = 0x3bb;
pub const CSR_PMPADDR12: u16 = 0x3bc;
pub const CSR_PMPADDR13: u16 = 0x3bd;
pub const CSR_PMPADDR14: u16 = 0x3be;
pub const CSR_PMPADDR15: u16 = 0x3bf;
pub const CSR_PMPADDR16: u16 = 0x3c0;
pub const CSR_PMPADDR17: u16 = 0x3c1;
pub const CSR_PMPADDR18: u16 = 0x3c2;
pub const CSR_PMPADDR19: u16 = 0x3c3;
pub const CSR_PMPADDR20: u16 = 0x3c4;
pub const CSR_PMPADDR21: u16 = 0x3c5;
pub const CSR_PMPADDR22: u16 = 0x3c6;
pub const CSR_PMPADDR23: u16 = 0x3c7;
pub const CSR_PMPADDR24: u16 = 0x3c8;
pub const CSR_PMPADDR25: u16 = 0x3c9;
pub const CSR_PMPADDR26: u16 = 0x3ca;
pub const CSR_PMPADDR27: u16 = 0x3cb;
pub const CSR_PMPADDR28: u16 = 0x3cc;
pub const CSR_PMPADDR29: u16 = 0x3cd;
pub const CSR_PMPADDR30: u16 = 0x3ce;
pub const CSR_PMPADDR31: u16 = 0x3cf;
pub const CSR_PMPADDR32: u16 = 0x3d0;
pub const CSR_PMPADDR33: u16 = 0x3d1;
pub const CSR_PMPADDR34: u16 = 0x3d2;
pub const CSR_PMPADDR35: u16 = 0x3d3;
pub const CSR_PMPADDR36: u16 = 0x3d4;
pub const CSR_PMPADDR37: u16 = 0x3d5;
pub const CSR_PMPADDR38: u16 = 0x3d6;
pub const CSR_PMPADDR39: u16 = 0x3d7;
pub const CSR_PMPADDR40: u16 = 0x3d8;
pub const CSR_PMPADDR41: u16 = 0x3d9;
pub const CSR_PMPADDR42: u16 = 0x3da;
pub const CSR_PMPADDR43: u16 = 0x3db;
pub const CSR_PMPADDR44: u16 = 0x3dc;
pub const CSR_PMPADDR45: u16 = 0x3dd;
pub const CSR_PMPADDR46: u16 = 0x3de;
pub const CSR_PMPADDR47: u16 = 0x3df;
pub const CSR_PMPADDR48: u16 = 0x3e0;
pub const CSR_PMPADDR49: u16 = 0x3e1;
pub const CSR_PMPADDR50: u16 = 0x3e2;
pub const CSR_PMPADDR51: u16 = 0x3e3;
pub const CSR_PMPADDR52: u16 = 0x3e4;
pub const CSR_PMPADDR53: u16 = 0x3e5;
pub const CSR_PMPADDR54: u16 = 0x3e6;
pub const CSR_PMPADDR55: u16 = 0x3e7;
pub const CSR_PMPADDR56: u16 = 0x3e8;
pub const CSR_PMPADDR57: u16 = 0x3e9;
pub const CSR_PMPADDR58: u16 = 0x3ea;
pub const CSR_PMPADDR59: u16 = 0x3eb;
pub const CSR_PMPADDR60: u16 = 0x3ec;
pub const CSR_PMPADDR61: u16 = 0x3ed;
pub const CSR_PMPADDR62: u16 = 0x3ee;
pub const CSR_PMPADDR63: u16 = 0x3ef;
pub const CSR_MSECCFG: u16 = 0x747;
pub const CSR_TSELECT: u16 = 0x7a0;
pub const CSR_TDATA1: u16 = 0x7a1;
pub const CSR_TDATA2: u16 = 0x7a2;
pub const CSR_TDATA3: u16 = 0x7a3;
pub const CSR_TINFO: u16 = 0x7a4;
pub const CSR_TCONTROL: u16 = 0x7a5;
pub const CSR_MCONTEXT: u16 = 0x7a8;
pub const CSR_MSCONTEXT: u16 = 0x7aa;
pub const CSR_DCSR: u16 = 0x7b0;
pub const CSR_DPC: u16 = 0x7b1;
pub const CSR_DSCRATCH0: u16 = 0x7b2;
pub const CSR_DSCRATCH1: u16 = 0x7b3;
pub const CSR_MCYCLE: u16 = 0xb00;
pub const CSR_MINSTRET: u16 = 0xb02;
pub const CSR_MHPMCOUNTER3: u16 = 0xb03;
pub const CSR_MHPMCOUNTER4: u16 = 0xb04;
pub const CSR_MHPMCOUNTER5: u16 = 0xb05;
pub const CSR_MHPMCOUNTER6: u16 = 0xb06;
pub const CSR_MHPMCOUNTER7: u16 = 0xb07;
pub const CSR_MHPMCOUNTER8: u16 = 0xb08;
pub const CSR_MHPMCOUNTER9: u16 = 0xb09;
pub const CSR_MHPMCOUNTER10: u16 = 0xb0a;
pub const CSR_MHPMCOUNTER11: u16 = 0xb0b;
pub const CSR_MHPMCOUNTER12: u16 = 0xb0c;
pub const CSR_MHPMCOUNTER13: u16 = 0xb0d;
pub const CSR_MHPMCOUNTER14: u16 = 0xb0e;
pub const CSR_MHPMCOUNTER15: u16 = 0xb0f;
pub const CSR_MHPMCOUNTER16: u16 = 0xb10;
pub const CSR_MHPMCOUNTER17: u16 = 0xb11;
pub const CSR_MHPMCOUNTER18: u16 = 0xb12;
pub const CSR_MHPMCOUNTER19: u16 = 0xb13;
pub const CSR_MHPMCOUNTER20: u16 = 0xb14;
pub const CSR_MHPMCOUNTER21: u16 = 0xb15;
pub const CSR_MHPMCOUNTER22: u16 = 0xb16;
pub const CSR_MHPMCOUNTER23: u16 = 0xb17;
pub const CSR_MHPMCOUNTER24: u16 = 0xb18;
pub const CSR_MHPMCOUNTER25: u16 = 0xb19;
pub const CSR_MHPMCOUNTER26: u16 = 0xb1a;
pub const CSR_MHPMCOUNTER27: u16 = 0xb1b;
pub const CSR_MHPMCOUNTER28: u16 = 0xb1c;
pub const CSR_MHPMCOUNTER29: u16 = 0xb1d;
pub const CSR_MHPMCOUNTER30: u16 = 0xb1e;
pub const CSR_MHPMCOUNTER31: u16 = 0xb1f;
pub const CSR_MHPMEVENT3: u16 = 0x323;
pub const CSR_MHPMEVENT4: u16 = 0x324;
pub const CSR_MHPMEVENT5: u16 = 0x325;
pub const CSR_MHPMEVENT6: u16 = 0x326;
pub const CSR_MHPMEVENT7: u16 = 0x327;
pub const CSR_MHPMEVENT8: u16 = 0x328;
pub const CSR_MHPMEVENT9: u16 = 0x329;
pub const CSR_MHPMEVENT10: u16 = 0x32a;
pub const CSR_MHPMEVENT11: u16 = 0x32b;
pub const CSR_MHPMEVENT12: u16 = 0x32c;
pub const CSR_MHPMEVENT13: u16 = 0x32d;
pub const CSR_MHPMEVENT14: u16 = 0x32e;
pub const CSR_MHPMEVENT15: u16 = 0x32f;
pub const CSR_MHPMEVENT16: u16 = 0x330;
pub const CSR_MHPMEVENT17: u16 = 0x331;
pub const CSR_MHPMEVENT18: u16 = 0x332;
pub const CSR_MHPMEVENT19: u16 = 0x333;
pub const CSR_MHPMEVENT20: u16 = 0x334;
pub const CSR_MHPMEVENT21: u16 = 0x335;
pub const CSR_MHPMEVENT22: u16 = 0x336;
pub const CSR_MHPMEVENT23: u16 = 0x337;
pub const CSR_MHPMEVENT24: u16 = 0x338;
pub const CSR_MHPMEVENT25: u16 = 0x339;
pub const CSR_MHPMEVENT26: u16 = 0x33a;
pub const CSR_MHPMEVENT27: u16 = 0x33b;
pub const CSR_MHPMEVENT28: u16 = 0x33c;
pub const CSR_MHPMEVENT29: u16 = 0x33d;
pub const CSR_MHPMEVENT30: u16 = 0x33e;
pub const CSR_MHPMEVENT31: u16 = 0x33f;
pub const CSR_MVENDORID: u16 = 0xf11;
pub const CSR_MARCHID: u16 = 0xf12;
pub const CSR_MIMPID: u16 = 0xf13;
pub const CSR_MHARTID: u16 = 0xf14;
pub const CSR_MCONFIGPTR: u16 = 0xf15;
pub const CSR_MTOPI: u16 = 0xfb0;
pub const CSR_SIEH: u16 = 0x114;
pub const CSR_SIPH: u16 = 0x154;
pub const CSR_STIMECMPH: u16 = 0x15d;
pub const CSR_VSIEH: u16 = 0x214;
pub const CSR_VSIPH: u16 = 0x254;
pub const CSR_VSTIMECMPH: u16 = 0x25d;
pub const CSR_HTIMEDELTAH: u16 = 0x615;
pub const CSR_HIDELEGH: u16 = 0x613;
pub const CSR_HVIENH: u16 = 0x618;
pub const CSR_HENVCFGH: u16 = 0x61a;
pub const CSR_HVIPH: u16 = 0x655;
pub const CSR_HVIPRIO1H: u16 = 0x656;
pub const CSR_HVIPRIO2H: u16 = 0x657;
pub const CSR_HSTATEEN0H: u16 = 0x61c;
pub const CSR_HSTATEEN1H: u16 = 0x61d;
pub const CSR_HSTATEEN2H: u16 = 0x61e;
pub const CSR_HSTATEEN3H: u16 = 0x61f;
pub const CSR_CYCLEH: u16 = 0xc80;
pub const CSR_TIMEH: u16 = 0xc81;
pub const CSR_INSTRETH: u16 = 0xc82;
pub const CSR_HPMCOUNTER3H: u16 = 0xc83;
pub const CSR_HPMCOUNTER4H: u16 = 0xc84;
pub const CSR_HPMCOUNTER5H: u16 = 0xc85;
pub const CSR_HPMCOUNTER6H: u16 = 0xc86;
pub const CSR_HPMCOUNTER7H: u16 = 0xc87;
pub const CSR_HPMCOUNTER8H: u16 = 0xc88;
pub const CSR_HPMCOUNTER9H: u16 = 0xc89;
pub const CSR_HPMCOUNTER10H: u16 = 0xc8a;
pub const CSR_HPMCOUNTER11H: u16 = 0xc8b;
pub const CSR_HPMCOUNTER12H: u16 = 0xc8c;
pub const CSR_HPMCOUNTER13H: u16 = 0xc8d;
pub const CSR_HPMCOUNTER14H: u16 = 0xc8e;
pub const CSR_HPMCOUNTER15H: u16 = 0xc8f;
pub const CSR_HPMCOUNTER16H: u16 = 0xc90;
pub const CSR_HPMCOUNTER17H: u16 = 0xc91;
pub const CSR_HPMCOUNTER18H: u16 = 0xc92;
pub const CSR_HPMCOUNTER19H: u16 = 0xc93;
pub const CSR_HPMCOUNTER20H: u16 = 0xc94;
pub const CSR_HPMCOUNTER21H: u16 = 0xc95;
pub const CSR_HPMCOUNTER22H: u16 = 0xc96;
pub const CSR_HPMCOUNTER23H: u16 = 0xc97;
pub const CSR_HPMCOUNTER24H: u16 = 0xc98;
pub const CSR_HPMCOUNTER25H: u16 = 0xc99;
pub const CSR_HPMCOUNTER26H: u16 = 0xc9a;
pub const CSR_HPMCOUNTER27H: u16 = 0xc9b;
pub const CSR_HPMCOUNTER28H: u16 = 0xc9c;
pub const CSR_HPMCOUNTER29H: u16 = 0xc9d;
pub const CSR_HPMCOUNTER30H: u16 = 0xc9e;
pub const CSR_HPMCOUNTER31H: u16 = 0xc9f;
pub const CSR_MSTATUSH: u16 = 0x310;
pub const CSR_MIDELEGH: u16 = 0x313;
pub const CSR_MIEH: u16 = 0x314;
pub const CSR_MVIENH: u16 = 0x318;
pub const CSR_MVIPH: u16 = 0x319;
pub const CSR_MENVCFGH: u16 = 0x31a;
pub const CSR_MSTATEEN0H: u16 = 0x31c;
pub const CSR_MSTATEEN1H: u16 = 0x31d;
pub const CSR_MSTATEEN2H: u16 = 0x31e;
pub const CSR_MSTATEEN3H: u16 = 0x31f;
pub const CSR_MIPH: u16 = 0x354;
pub const CSR_MHPMEVENT3H: u16 = 0x723;
pub const CSR_MHPMEVENT4H: u16 = 0x724;
pub const CSR_MHPMEVENT5H: u16 = 0x725;
pub const CSR_MHPMEVENT6H: u16 = 0x726;
pub const CSR_MHPMEVENT7H: u16 = 0x727;
pub const CSR_MHPMEVENT8H: u16 = 0x728;
pub const CSR_MHPMEVENT9H: u16 = 0x729;
pub const CSR_MHPMEVENT10H: u16 = 0x72a;
pub const CSR_MHPMEVENT11H: u16 = 0x72b;
pub const CSR_MHPMEVENT12H: u16 = 0x72c;
pub const CSR_MHPMEVENT13H: u16 = 0x72d;
pub const CSR_MHPMEVENT14H: u16 = 0x72e;
pub const CSR_MHPMEVENT15H: u16 = 0x72f;
pub const CSR_MHPMEVENT16H: u16 = 0x730;
pub const CSR_MHPMEVENT17H: u16 = 0x731;
pub const CSR_MHPMEVENT18H: u16 = 0x732;
pub const CSR_MHPMEVENT19H: u16 = 0x733;
pub const CSR_MHPMEVENT20H: u16 = 0x734;
pub const CSR_MHPMEVENT21H: u16 = 0x735;
pub const CSR_MHPMEVENT22H: u16 = 0x736;
pub const CSR_MHPMEVENT23H: u16 = 0x737;
pub const CSR_MHPMEVENT24H: u16 = 0x738;
pub const CSR_MHPMEVENT25H: u16 = 0x739;
pub const CSR_MHPMEVENT26H: u16 = 0x73a;
pub const CSR_MHPMEVENT27H: u16 = 0x73b;
pub const CSR_MHPMEVENT28H: u16 = 0x73c;
pub const CSR_MHPMEVENT29H: u16 = 0x73d;
pub const CSR_MHPMEVENT30H: u16 = 0x73e;
pub const CSR_MHPMEVENT31H: u16 = 0x73f;
pub const CSR_MSECCFGH: u16 = 0x757;
pub const CSR_MCYCLEH: u16 = 0xb80;
pub const CSR_MINSTRETH: u16 = 0xb82;
pub const CSR_MHPMCOUNTER3H: u16 = 0xb83;
pub const CSR_MHPMCOUNTER4H: u16 = 0xb84;
pub const CSR_MHPMCOUNTER5H: u16 = 0xb85;
pub const CSR_MHPMCOUNTER6H: u16 = 0xb86;
pub const CSR_MHPMCOUNTER7H: u16 = 0xb87;
pub const CSR_MHPMCOUNTER8H: u16 = 0xb88;
pub const CSR_MHPMCOUNTER9H: u16 = 0xb89;
pub const CSR_MHPMCOUNTER10H: u16 = 0xb8a;
pub const CSR_MHPMCOUNTER11H: u16 = 0xb8b;
pub const CSR_MHPMCOUNTER12H: u16 = 0xb8c;
pub const CSR_MHPMCOUNTER13H: u16 = 0xb8d;
pub const CSR_MHPMCOUNTER14H: u16 = 0xb8e;
pub const CSR_MHPMCOUNTER15H: u16 = 0xb8f;
pub const CSR_MHPMCOUNTER16H: u16 = 0xb90;
pub const CSR_MHPMCOUNTER17H: u16 = 0xb91;
pub const CSR_MHPMCOUNTER18H: u16 = 0xb92;
pub const CSR_MHPMCOUNTER19H: u16 = 0xb93;
pub const CSR_MHPMCOUNTER20H: u16 = 0xb94;
pub const CSR_MHPMCOUNTER21H: u16 = 0xb95;
pub const CSR_MHPMCOUNTER22H: u16 = 0xb96;
pub const CSR_MHPMCOUNTER23H: u16 = 0xb97;
pub const CSR_MHPMCOUNTER24H: u16 = 0xb98;
pub const CSR_MHPMCOUNTER25H: u16 = 0xb99;
pub const CSR_MHPMCOUNTER26H: u16 = 0xb9a;
pub const CSR_MHPMCOUNTER27H: u16 = 0xb9b;
pub const CSR_MHPMCOUNTER28H: u16 = 0xb9c;
pub const CSR_MHPMCOUNTER29H: u16 = 0xb9d;
pub const CSR_MHPMCOUNTER30H: u16 = 0xb9e;
pub const CSR_MHPMCOUNTER31H: u16 = 0xb9f;
pub const CAUSE_MISALIGNED_FETCH: u8 = 0x0;
pub const CAUSE_FETCH_ACCESS: u8 = 0x1;
pub const CAUSE_ILLEGAL_INSTRUCTION: u8 = 0x2;
pub const CAUSE_BREAKPOINT: u8 = 0x3;
pub const CAUSE_MISALIGNED_LOAD: u8 = 0x4;
pub const CAUSE_LOAD_ACCESS: u8 = 0x5;
pub const CAUSE_MISALIGNED_STORE: u8 = 0x6;
pub const CAUSE_STORE_ACCESS: u8 = 0x7;
pub const CAUSE_USER_ECALL: u8 = 0x8;
pub const CAUSE_SUPERVISOR_ECALL: u8 = 0x9;
pub const CAUSE_VIRTUAL_SUPERVISOR_ECALL: u8 = 0xa;
pub const CAUSE_MACHINE_ECALL: u8 = 0xb;
pub const CAUSE_FETCH_PAGE_FAULT: u8 = 0xc;
pub const CAUSE_LOAD_PAGE_FAULT: u8 = 0xd;
pub const CAUSE_STORE_PAGE_FAULT: u8 = 0xf;
pub const CAUSE_FETCH_GUEST_PAGE_FAULT: u8 = 0x14;
pub const CAUSE_LOAD_GUEST_PAGE_FAULT: u8 = 0x15;
pub const CAUSE_VIRTUAL_INSTRUCTION: u8 = 0x16;
pub const CAUSE_STORE_GUEST_PAGE_FAULT: u8 = 0x17;

pub const MSTATUS_UIE: u64 = 0x00000001;
pub const MSTATUS_SIE: u64 = 0x00000002;
pub const MSTATUS_HIE: u64 = 0x00000004;
pub const MSTATUS_MIE: u64 = 0x00000008;
pub const MSTATUS_UPIE: u64 = 0x00000010;
pub const MSTATUS_SPIE: u64 = 0x00000020;
pub const MSTATUS_UBE: u64 = 0x00000040;
pub const MSTATUS_MPIE: u64 = 0x00000080;
pub const MSTATUS_SPP: u64 = 0x00000100;
pub const MSTATUS_VS: u64 = 0x00000600;
pub const MSTATUS_MPP: u64 = 0x00001800;
pub const MSTATUS_FS: u64 = 0x00006000;
pub const MSTATUS_XS: u64 = 0x00018000;
pub const MSTATUS_MPRV: u64 = 0x00020000;
pub const MSTATUS_SUM: u64 = 0x00040000;
pub const MSTATUS_MXR: u64 = 0x00080000;
pub const MSTATUS_TVM: u64 = 0x00100000;
pub const MSTATUS_TW: u64 = 0x00200000;
pub const MSTATUS_TSR: u64 = 0x00400000;
pub const MSTATUS32_SD: u64 = 0x80000000;
pub const MSTATUS_UXL: u64 = 0x0000000300000000;
pub const MSTATUS_SXL: u64 = 0x0000000C00000000;
pub const MSTATUS_SBE: u64 = 0x0000001000000000;
pub const MSTATUS_MBE: u64 = 0x0000002000000000;
pub const MSTATUS_GVA: u64 = 0x0000004000000000;
pub const MSTATUS_MPV: u64 = 0x0000008000000000;
pub const MSTATUS64_SD: u64 = 0x8000000000000000;

pub const MSTATUSH_SBE: u64 = 0x00000010;
pub const MSTATUSH_MBE: u64 = 0x00000020;
pub const MSTATUSH_GVA: u64 = 0x00000040;
pub const MSTATUSH_MPV: u64 = 0x00000080;

pub const SSTATUS_UIE: u64 = 0x00000001;
pub const SSTATUS_SIE: u64 = 0x00000002;
pub const SSTATUS_UPIE: u64 = 0x00000010;
pub const SSTATUS_SPIE: u64 = 0x00000020;
pub const SSTATUS_UBE: u64 = 0x00000040;
pub const SSTATUS_SPP: u64 = 0x00000100;
pub const SSTATUS_VS: u64 = 0x00000600;
pub const SSTATUS_FS: u64 = 0x00006000;
pub const SSTATUS_XS: u64 = 0x00018000;
pub const SSTATUS_SUM: u64 = 0x00040000;
pub const SSTATUS_MXR: u64 = 0x00080000;
pub const SSTATUS32_SD: u64 = 0x80000000;
pub const SSTATUS_UXL: u64 = 0x0000000300000000;
pub const SSTATUS64_SD: u64 = 0x8000000000000000;

pub const HSTATUS_VSXL: u64 = 0x300000000;
pub const HSTATUS_VTSR: u64 = 0x00400000;
pub const HSTATUS_VTW: u64 = 0x00200000;
pub const HSTATUS_VTVM: u64 = 0x00100000;
pub const HSTATUS_VGEIN: u64 = 0x0003f000;
pub const HSTATUS_HU: u64 = 0x00000200;
pub const HSTATUS_SPVP: u64 = 0x00000100;
pub const HSTATUS_SPV: u64 = 0x00000080;
pub const HSTATUS_GVA: u64 = 0x00000040;
pub const HSTATUS_VSBE: u64 = 0x00000020;

pub const USTATUS_UIE: u64 = 0x00000001;
pub const USTATUS_UPIE: u64 = 0x00000010;

pub const DCSR_XDEBUGVER: u64 = 3 << 30;
pub const DCSR_NDRESET: u64 = 1 << 29;
pub const DCSR_FULLRESET: u64 = 1 << 28;
pub const DCSR_EBREAKM: u64 = 1 << 15;
pub const DCSR_EBREAKH: u64 = 1 << 14;
pub const DCSR_EBREAKS: u64 = 1 << 13;
pub const DCSR_EBREAKU: u64 = 1 << 12;
pub const DCSR_STOPCYCLE: u64 = 1 << 10;
pub const DCSR_STOPTIME: u64 = 1 << 9;
pub const DCSR_CAUSE: u64 = 7 << 6;
pub const DCSR_DEBUGINT: u64 = 1 << 5;
pub const DCSR_HALT: u64 = 1 << 3;
pub const DCSR_STEP: u64 = 1 << 2;
pub const DCSR_PRV: u64 = 3 << 0;

pub const DCSR_CAUSE_NONE: u64 = 0;
pub const DCSR_CAUSE_SWBP: u64 = 1;
pub const DCSR_CAUSE_HWBP: u64 = 2;
pub const DCSR_CAUSE_DEBUGINT: u64 = 3;
pub const DCSR_CAUSE_STEP: u64 = 4;
pub const DCSR_CAUSE_HALT: u64 = 5;
pub const DCSR_CAUSE_GROUP: u64 = 6;

// pub const MCONTROL_TYPE(xlen)    (0xfULL<<((xlen)-4))
// pub const MCONTROL_DMODE(xlen)   (1ULL<<((xlen)-5))
// pub const MCONTROL_MASKMAX(xlen) (0x3fULL<<((xlen)-11))

pub const MCONTROL_SELECT: u64 = 1 << 19;
pub const MCONTROL_TIMING: u64 = 1 << 18;
pub const MCONTROL_ACTION: u64 = 0x3f << 12;
pub const MCONTROL_CHAIN: u64 = 1 << 11;
pub const MCONTROL_MATCH: u64 = 0xf << 7;
pub const MCONTROL_M: u64 = 1 << 6;
pub const MCONTROL_H: u64 = 1 << 5;
pub const MCONTROL_S: u64 = 1 << 4;
pub const MCONTROL_U: u64 = 1 << 3;
pub const MCONTROL_EXECUTE: u64 = 1 << 2;
pub const MCONTROL_STORE: u64 = 1 << 1;
pub const MCONTROL_LOAD: u64 = 1 << 0;

pub const MCONTROL_TYPE_NONE: u64 = 0;
pub const MCONTROL_TYPE_MATCH: u64 = 2;

pub const MCONTROL_ACTION_DEBUG_EXCEPTION: u64 = 0;
pub const MCONTROL_ACTION_DEBUG_MODE: u64 = 1;
pub const MCONTROL_ACTION_TRACE_START: u64 = 2;
pub const MCONTROL_ACTION_TRACE_STOP: u64 = 3;
pub const MCONTROL_ACTION_TRACE_EMIT: u64 = 4;

pub const MCONTROL_MATCH_EQUAL: u64 = 0;
pub const MCONTROL_MATCH_NAPOT: u64 = 1;
pub const MCONTROL_MATCH_GE: u64 = 2;
pub const MCONTROL_MATCH_LT: u64 = 3;
pub const MCONTROL_MATCH_MASK_LOW: u64 = 4;
pub const MCONTROL_MATCH_MASK_HIGH: u64 = 5;

pub const MIP_USIP: u64 = 1 << IRQ_U_SOFT;
pub const MIP_SSIP: u64 = 1 << IRQ_S_SOFT;
pub const MIP_VSSIP: u64 = 1 << IRQ_VS_SOFT;
pub const MIP_MSIP: u64 = 1 << IRQ_M_SOFT;
pub const MIP_UTIP: u64 = 1 << IRQ_U_TIMER;
pub const MIP_STIP: u64 = 1 << IRQ_S_TIMER;
pub const MIP_VSTIP: u64 = 1 << IRQ_VS_TIMER;
pub const MIP_MTIP: u64 = 1 << IRQ_M_TIMER;
pub const MIP_UEIP: u64 = 1 << IRQ_U_EXT;
pub const MIP_SEIP: u64 = 1 << IRQ_S_EXT;
pub const MIP_VSEIP: u64 = 1 << IRQ_VS_EXT;
pub const MIP_MEIP: u64 = 1 << IRQ_M_EXT;
pub const MIP_SGEIP: u64 = 1 << IRQ_S_GEXT;
pub const MIP_LCOFIP: u64 = 1 << IRQ_LCOF;

pub const MIP_S_MASK: u64 = MIP_SSIP | MIP_STIP | MIP_SEIP;
pub const MIP_VS_MASK: u64 = MIP_VSSIP | MIP_VSTIP | MIP_VSEIP;
pub const MIP_HS_MASK: u64 = MIP_VS_MASK | MIP_SGEIP;

pub const MIDELEG_FORCED_MASK: u64 = MIP_HS_MASK;

pub const SIP_SSIP: u64 = MIP_SSIP;
pub const SIP_STIP: u64 = MIP_STIP;

pub const MENVCFG_FIOM: u64 = 0x00000001;
pub const MENVCFG_CBIE: u64 = 0x00000030;
pub const MENVCFG_CBCFE: u64 = 0x00000040;
pub const MENVCFG_CBZE: u64 = 0x00000080;
pub const MENVCFG_HADE: u64 = 0x2000000000000000;
pub const MENVCFG_PBMTE: u64 = 0x4000000000000000;
pub const MENVCFG_STCE: u64 = 0x8000000000000000;

pub const MENVCFGH_HADE: u64 = 0x20000000;
pub const MENVCFGH_PBMTE: u64 = 0x40000000;
pub const MENVCFGH_STCE: u64 = 0x80000000;

pub const MSTATEEN0_CS: u64 = 0x00000001;
pub const MSTATEEN0_FCSR: u64 = 0x00000002;
pub const MSTATEEN0_JVT: u64 = 0x00000004;
pub const MSTATEEN0_HCONTEXT: u64 = 0x0200000000000000;
pub const MSTATEEN0_HENVCFG: u64 = 0x4000000000000000;
pub const MSTATEEN_HSTATEEN: u64 = 0x8000000000000000;

pub const MSTATEEN0H_HCONTEXT: u64 = 0x02000000;
pub const MSTATEEN0H_HENVCFG: u64 = 0x40000000;
pub const MSTATEENH_HSTATEEN: u64 = 0x80000000;

pub const MHPMEVENT_VUINH: u64 = 0x0400000000000000;
pub const MHPMEVENT_VSINH: u64 = 0x0800000000000000;
pub const MHPMEVENT_UINH: u64 = 0x1000000000000000;
pub const MHPMEVENT_SINH: u64 = 0x2000000000000000;
pub const MHPMEVENT_MINH: u64 = 0x4000000000000000;
pub const MHPMEVENT_OF: u64 = 0x8000000000000000;

pub const MHPMEVENTH_VUINH: u64 = 0x04000000;
pub const MHPMEVENTH_VSINH: u64 = 0x08000000;
pub const MHPMEVENTH_UINH: u64 = 0x10000000;
pub const MHPMEVENTH_SINH: u64 = 0x20000000;
pub const MHPMEVENTH_MINH: u64 = 0x40000000;
pub const MHPMEVENTH_OF: u64 = 0x80000000;

pub const HENVCFG_FIOM: u64 = 0x00000001;
pub const HENVCFG_CBIE: u64 = 0x00000030;
pub const HENVCFG_CBCFE: u64 = 0x00000040;
pub const HENVCFG_CBZE: u64 = 0x00000080;
pub const HENVCFG_HADE: u64 = 0x2000000000000000;
pub const HENVCFG_PBMTE: u64 = 0x4000000000000000;
pub const HENVCFG_STCE: u64 = 0x8000000000000000;

pub const HENVCFGH_HADE: u64 = 0x20000000;
pub const HENVCFGH_PBMTE: u64 = 0x40000000;
pub const HENVCFGH_STCE: u64 = 0x80000000;

pub const HSTATEEN0_CS: u64 = 0x00000001;
pub const HSTATEEN0_FCSR: u64 = 0x00000002;
pub const HSTATEEN0_JVT: u64 = 0x00000004;
pub const HSTATEEN0_SCONTEXT: u64 = 0x0200000000000000;
pub const HSTATEEN0_SENVCFG: u64 = 0x4000000000000000;
pub const HSTATEEN_SSTATEEN: u64 = 0x8000000000000000;

pub const HSTATEEN0H_SCONTEXT: u64 = 0x02000000;
pub const HSTATEEN0H_SENVCFG: u64 = 0x40000000;
pub const HSTATEENH_SSTATEEN: u64 = 0x80000000;

pub const SENVCFG_FIOM: u64 = 0x00000001;
pub const SENVCFG_CBIE: u64 = 0x00000030;
pub const SENVCFG_CBCFE: u64 = 0x00000040;
pub const SENVCFG_CBZE: u64 = 0x00000080;

pub const SSTATEEN0_CS: u64 = 0x00000001;
pub const SSTATEEN0_FCSR: u64 = 0x00000002;
pub const SSTATEEN0_JVT: u64 = 0x00000004;

pub const MSECCFG_MML: u64 = 0x00000001;
pub const MSECCFG_MMWP: u64 = 0x00000002;
pub const MSECCFG_RLB: u64 = 0x00000004;
pub const MSECCFG_USEED: u64 = 0x00000100;
pub const MSECCFG_SSEED: u64 = 0x00000200;

/* jvt fields */
pub const JVT_MODE: u64 = 0x3F;
pub const JVT_BASE: u64 = !0x3F;

pub const PRV_U: u64 = 0;
pub const PRV_S: u64 = 1;
pub const PRV_M: u64 = 3;

pub const PRV_HS: u64 = PRV_S + 1;

pub const SATP32_MODE: u64 = 0x80000000;
pub const SATP32_ASID: u64 = 0x7FC00000;
pub const SATP32_PPN: u64 = 0x003FFFFF;
pub const SATP64_MODE: u64 = 0xF000000000000000;
pub const SATP64_ASID: u64 = 0x0FFFF00000000000;
pub const SATP64_PPN: u64 = 0x00000FFFFFFFFFFF;

pub const SATP_MODE_OFF: u64 = 0;
pub const SATP_MODE_SV32: u64 = 1;
pub const SATP_MODE_SV39: u64 = 8;
pub const SATP_MODE_SV48: u64 = 9;
pub const SATP_MODE_SV57: u64 = 10;
pub const SATP_MODE_SV64: u64 = 11;

pub const HGATP32_MODE: u64 = 0x80000000;
pub const HGATP32_VMID: u64 = 0x1FC00000;
pub const HGATP32_PPN: u64 = 0x003FFFFF;

pub const HGATP64_MODE: u64 = 0xF000000000000000;
pub const HGATP64_VMID: u64 = 0x03FFF00000000000;
pub const HGATP64_PPN: u64 = 0x00000FFFFFFFFFFF;

pub const HGATP_MODE_OFF: u64 = 0;
pub const HGATP_MODE_SV32X4: u64 = 1;
pub const HGATP_MODE_SV39X4: u64 = 8;
pub const HGATP_MODE_SV48X4: u64 = 9;
pub const HGATP_MODE_SV57X4: u64 = 10;

pub const PMP_R: u64 = 0x01;
pub const PMP_W: u64 = 0x02;
pub const PMP_X: u64 = 0x04;
pub const PMP_A: u64 = 0x18;
pub const PMP_L: u64 = 0x80;
pub const PMP_SHIFT: u64 = 2;

pub const PMP_TOR: u64 = 0x08;
pub const PMP_NA4: u64 = 0x10;
pub const PMP_NAPOT: u64 = 0x18;

pub const IRQ_U_SOFT: u64 = 0;
pub const IRQ_S_SOFT: u64 = 1;
pub const IRQ_VS_SOFT: u64 = 2;
pub const IRQ_M_SOFT: u64 = 3;
pub const IRQ_U_TIMER: u64 = 4;
pub const IRQ_S_TIMER: u64 = 5;
pub const IRQ_VS_TIMER: u64 = 6;
pub const IRQ_M_TIMER: u64 = 7;
pub const IRQ_U_EXT: u64 = 8;
pub const IRQ_S_EXT: u64 = 9;
pub const IRQ_VS_EXT: u64 = 10;
pub const IRQ_M_EXT: u64 = 11;
pub const IRQ_S_GEXT: u64 = 12;
pub const IRQ_COP: u64 = 12;
pub const IRQ_LCOF: u64 = 13;

/* page table entry (PTE) fields */
pub const PTE_V: u64 = 0x001; /* Valid */
pub const PTE_R: u64 = 0x002; /* Read */
pub const PTE_W: u64 = 0x004; /* Write */
pub const PTE_X: u64 = 0x008; /* Execute */
pub const PTE_U: u64 = 0x010; /* User */
pub const PTE_G: u64 = 0x020; /* Global */
pub const PTE_A: u64 = 0x040; /* Accessed */
pub const PTE_D: u64 = 0x080; /* Dirty */
pub const PTE_SOFT: u64 = 0x300; /* Reserved for Software */
pub const PTE_RSVD: u64 = 0x1FC0000000000000; /* Reserved for future standard use */
pub const PTE_PBMT: u64 = 0x6000000000000000; /* Svpbmt: Page-based memory types */
pub const PTE_N: u64 = 0x8000000000000000; /* Svnapot: NAPOT translation contiguity */
pub const PTE_ATTR: u64 = 0xFFC0000000000000; /* All attributes and reserved bits */

pub const PTE_PPN_SHIFT: u64 = 10;

// pub const PTE_TABLE(PTE) (((PTE) & (PTE_V | PTE_R | PTE_W | PTE_X)) == PTE_V)

pub struct Instruction {
    pub mask: u32,
    pub match_data: u32,
    pub name: &'static str,
    pub operation: fn(cpu: &mut CpuCore, word: u32, address: u64) -> Result<(), TrapType>,
}

pub struct FormatB {
    pub rs1: u64,
    pub rs2: u64,
    pub imm: u64,
}
pub struct FormatI {
    pub rd: u64,
    pub rs1: u64,
    pub imm: i64,
}
pub struct FormatJ {
    pub rd: u64,
    pub imm: u64,
}
pub struct FormatR {
    pub rd: u64,
    pub rs1: u64,
    pub rs2: u64,
}
pub struct FormatS {
    pub rs1: u64,
    pub rs2: u64,
    pub imm: i64,
}

pub struct FormatU {
    pub rd: u64,
    pub imm: u64,
}

pub fn parse_format_b(word: u32) -> FormatB {
    FormatB {
        rs1: ((word >> 15) & 0x1f) as u64, // [19:15]
        rs2: ((word >> 20) & 0x1f) as u64, // [24:20]
        imm: (
            match word & 0x80000000 { // imm[31:12] = [31]
				0x80000000 => 0xfffff000,
				_ => 0
			} |
			((word << 4) & 0x00000800) | // imm[11] = [7]
			((word >> 20) & 0x000007e0) | // imm[10:5] = [30:25]
			((word >> 7) & 0x0000001e)
            // imm[4:1] = [11:8]
        ) as i32 as i64 as u64,
    }
}

pub fn parse_format_i(word: u32) -> FormatI {
    FormatI {
        rd: ((word >> 7) & 0x1f) as u64,   // [11:7]
        rs1: ((word >> 15) & 0x1f) as u64, // [19:15]
        imm: (
            match word & 0x80000000 {
                // imm[31:11] = [31]
                0x80000000 => 0xfffff800,
                _ => 0,
            } | ((word >> 20) & 0x000007ff)
            // imm[10:0] = [30:20]
        ) as i32 as i64,
    }
}

pub fn parse_format_j(word: u32) -> FormatJ {
    FormatJ {
        rd: ((word >> 7) & 0x1f) as u64, // [11:7]
        imm: (
            match word & 0x80000000 { // imm[31:20] = [31]
				0x80000000 => 0xfff00000,
				_ => 0
			} |
			(word & 0x000ff000) | // imm[19:12] = [19:12]
			((word & 0x00100000) >> 9) | // imm[11] = [20]
			((word & 0x7fe00000) >> 20)
            // imm[10:1] = [30:21]
        ) as i32 as i64 as u64,
    }
}

pub fn parse_format_r(word: u32) -> FormatR {
    FormatR {
        rd: ((word >> 7) & 0x1f) as u64,   // [11:7]
        rs1: ((word >> 15) & 0x1f) as u64, // [19:15]
        rs2: ((word >> 20) & 0x1f) as u64, // [24:20]
    }
}

pub fn parse_format_s(word: u32) -> FormatS {
    FormatS {
        rs1: ((word >> 15) & 0x1f) as u64, // [19:15]
        rs2: ((word >> 20) & 0x1f) as u64, // [24:20]
        imm: (
            match word & 0x80000000 {
				0x80000000 => 0xfffff000,
				_ => 0
			} | // imm[31:12] = [31]
			((word >> 20) & 0xfe0) | // imm[11:5] = [31:25]
			((word >> 7) & 0x1f)
            // imm[4:0] = [11:7]
        ) as i32 as i64,
    }
}

pub fn parse_format_u(word: u32) -> FormatU {
    FormatU {
        rd: ((word >> 7) & 0x1f) as u64, // [11:7]
        imm: (
            match word & 0x80000000 {
				0x80000000 => 0xffffffff00000000,
				_ => 0
			} | // imm[63:32] = [31]
			((word as u64) & 0xfffff000)
            // imm[31:12] = [31:12]
        ),
    }
}

pub struct FormatCSR {
    pub csr: u64,
    pub rs1: u64,
    pub rd: u64,
}

pub fn parse_format_csr(word: u32) -> FormatCSR {
    FormatCSR {
        csr: ((word >> 20) & 0xfff) as u64, // [31:20]
        rs1: ((word >> 15) & 0x1f) as u64,  // [19:15], also uimm
        rd: ((word >> 7) & 0x1f) as u64,    // [11:7]
    }
}
// #define PRV_U 0
// #define PRV_S 1
// #define PRV_M 3

// #define PRV_HS (PRV_S + 1)

#[derive(EnumString, FromRepr, IntoStaticStr, Display, Debug, PartialEq, Clone)]
pub enum PrivilegeLevels {
    User = 0,
    Supervisor = 1,
    Machine = 3,
}
#[inline]
pub fn get_field(reg: u64, mask: u64) -> u64 {
    let shift = mask.trailing_zeros();
    (reg & mask) >> shift
}
#[inline]
pub fn set_field(reg: u64, mask: u64, val: u64) -> u64 {
    let shift = mask.trailing_zeros();
    (reg & !mask) | ((val << shift) & mask)
}
